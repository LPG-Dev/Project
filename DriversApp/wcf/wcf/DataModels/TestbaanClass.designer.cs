#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF.DataModels
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LPG_DEV")]
	public partial class TestbaanClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestbaan(Testbaan instance);
    partial void UpdateTestbaan(Testbaan instance);
    partial void DeleteTestbaan(Testbaan instance);
    #endregion
		
		public TestbaanClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LPG_DEVConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestbaanClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestbaanClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestbaanClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestbaanClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Testbaan> Testbaans
		{
			get
			{
				return this.GetTable<Testbaan>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Testbaan")]
	public partial class Testbaan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _testbaan_code;
		
		private string _baan_naam;
		
		private int _lengte;
		
		private decimal _diepte;
		
		private decimal _breedte;
		
		private string _info;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontestbaan_codeChanging(string value);
    partial void Ontestbaan_codeChanged();
    partial void Onbaan_naamChanging(string value);
    partial void Onbaan_naamChanged();
    partial void OnlengteChanging(int value);
    partial void OnlengteChanged();
    partial void OndiepteChanging(decimal value);
    partial void OndiepteChanged();
    partial void OnbreedteChanging(decimal value);
    partial void OnbreedteChanged();
    partial void OninfoChanging(string value);
    partial void OninfoChanged();
    #endregion
		
		public Testbaan()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testbaan_code", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string testbaan_code
		{
			get
			{
				return this._testbaan_code;
			}
			set
			{
				if ((this._testbaan_code != value))
				{
					this.Ontestbaan_codeChanging(value);
					this.SendPropertyChanging();
					this._testbaan_code = value;
					this.SendPropertyChanged("testbaan_code");
					this.Ontestbaan_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baan_naam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string baan_naam
		{
			get
			{
				return this._baan_naam;
			}
			set
			{
				if ((this._baan_naam != value))
				{
					this.Onbaan_naamChanging(value);
					this.SendPropertyChanging();
					this._baan_naam = value;
					this.SendPropertyChanged("baan_naam");
					this.Onbaan_naamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lengte", DbType="Int NOT NULL")]
		public int lengte
		{
			get
			{
				return this._lengte;
			}
			set
			{
				if ((this._lengte != value))
				{
					this.OnlengteChanging(value);
					this.SendPropertyChanging();
					this._lengte = value;
					this.SendPropertyChanged("lengte");
					this.OnlengteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diepte", DbType="Decimal(11,0) NOT NULL")]
		public decimal diepte
		{
			get
			{
				return this._diepte;
			}
			set
			{
				if ((this._diepte != value))
				{
					this.OndiepteChanging(value);
					this.SendPropertyChanging();
					this._diepte = value;
					this.SendPropertyChanged("diepte");
					this.OndiepteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_breedte", DbType="Decimal(11,0) NOT NULL")]
		public decimal breedte
		{
			get
			{
				return this._breedte;
			}
			set
			{
				if ((this._breedte != value))
				{
					this.OnbreedteChanging(value);
					this.SendPropertyChanging();
					this._breedte = value;
					this.SendPropertyChanged("breedte");
					this.OnbreedteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_info", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string info
		{
			get
			{
				return this._info;
			}
			set
			{
				if ((this._info != value))
				{
					this.OninfoChanging(value);
					this.SendPropertyChanging();
					this._info = value;
					this.SendPropertyChanged("info");
					this.OninfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
