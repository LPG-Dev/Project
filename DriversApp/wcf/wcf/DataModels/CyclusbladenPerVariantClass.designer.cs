#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF.DataModels
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LPG_DEV")]
	public partial class CyclusbladenPerVariantClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCyclusbladenPerVariant(CyclusbladenPerVariant instance);
    partial void UpdateCyclusbladenPerVariant(CyclusbladenPerVariant instance);
    partial void DeleteCyclusbladenPerVariant(CyclusbladenPerVariant instance);
    #endregion
		
		public CyclusbladenPerVariantClassDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LPG_DEVConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CyclusbladenPerVariantClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CyclusbladenPerVariantClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CyclusbladenPerVariantClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CyclusbladenPerVariantClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CyclusbladenPerVariant> CyclusbladenPerVariants
		{
			get
			{
				return this.GetTable<CyclusbladenPerVariant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CyclusbladenPerVariant")]
	public partial class CyclusbladenPerVariant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _volgorde;
		
		private string _code;
		
		private string _procedure_code;
		
		private string _variant_code;
		
		private int _cyclusblad_code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvolgordeChanging(int value);
    partial void OnvolgordeChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void Onprocedure_codeChanging(string value);
    partial void Onprocedure_codeChanged();
    partial void Onvariant_codeChanging(string value);
    partial void Onvariant_codeChanged();
    partial void Oncyclusblad_codeChanging(int value);
    partial void Oncyclusblad_codeChanged();
    #endregion
		
		public CyclusbladenPerVariant()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volgorde", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int volgorde
		{
			get
			{
				return this._volgorde;
			}
			set
			{
				if ((this._volgorde != value))
				{
					this.OnvolgordeChanging(value);
					this.SendPropertyChanging();
					this._volgorde = value;
					this.SendPropertyChanged("volgorde");
					this.OnvolgordeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_procedure_code", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string procedure_code
		{
			get
			{
				return this._procedure_code;
			}
			set
			{
				if ((this._procedure_code != value))
				{
					this.Onprocedure_codeChanging(value);
					this.SendPropertyChanging();
					this._procedure_code = value;
					this.SendPropertyChanged("procedure_code");
					this.Onprocedure_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_variant_code", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string variant_code
		{
			get
			{
				return this._variant_code;
			}
			set
			{
				if ((this._variant_code != value))
				{
					this.Onvariant_codeChanging(value);
					this.SendPropertyChanging();
					this._variant_code = value;
					this.SendPropertyChanged("variant_code");
					this.Onvariant_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cyclusblad_code", DbType="Int NOT NULL")]
		public int cyclusblad_code
		{
			get
			{
				return this._cyclusblad_code;
			}
			set
			{
				if ((this._cyclusblad_code != value))
				{
					this.Oncyclusblad_codeChanging(value);
					this.SendPropertyChanging();
					this._cyclusblad_code = value;
					this.SendPropertyChanged("cyclusblad_code");
					this.Oncyclusblad_codeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
